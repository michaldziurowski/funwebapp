package html

import "fmt"

type Elem interface {
  String() string
}

func renderElem(tagName string, attrs map[string]string, children []Elem) string {
attr := ""
for n, v := range attrs {
attr += fmt.Sprintf(` %s=%q`, n, v)
}
childrenHtml := ""
for _, child := range children {
childrenHtml += child.String()
}
return fmt.Sprintf("<%[1]s%s>%s</%[1]s>", tagName, attr, childrenHtml)
}

type Text string

func (x *Text) String() string {
  return string(*x)
}

{{ range $key, $value := . }}
{{if ne $key "*"}}
type {{ $key }} struct {
Attrs map[string]string
Children []Elem
}

var {{ title $key }} *{{ $key }}

func (x *{{$key}}) String() string {
  return renderElem("{{$key}}", x.Attrs, x.Children)
}

func (x *{{ $key }}) C(e ...Elem) *{{ $key }}{
  z := x
  if x == nil {
    z = &{{ $key }}{Attrs: map[string]string{}}
  }
  z.Children = append(z.Children, e...)
  return z
}

{{ range $aidx, $akey := $value.Attributes -}}
func (x *{{ $key }}) {{ removedash $akey | title }}(v string) *{{ $key }} {
  z := x
  if x == nil {
    z = &{{ $key }}{Attrs: map[string]string{}}
  }
  z.Attrs["{{ $akey }}"] = v
  return z 
}
{{ end }}

{{ end }}
{{ end }}


